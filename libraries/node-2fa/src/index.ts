import notp from 'notp';
import crypto from 'crypto';
import b32 from 'thirty-two';
import { Options } from './interfaces';

/**
 * Generates a secret and QR code for two factor authentication.
 *
 * @param {Options} [options] Optional configuration such as account name.
 * @returns {{ secret: string; uri: string; qr: string }} The generated secret
 *          alongside the otpauth URI and a QR code url.
 */
export function generateSecret(options?: Options) {
  const config = {
    name: encodeURIComponent(options?.name ?? 'App'),
    account: encodeURIComponent(options?.account ? `:${options.account}` : ''),
  } as const;

  const bin = crypto.randomBytes(20);
  const base32 = b32.encode(bin).toString('utf8').replace(/=/g, '');

  const secret = base32
    .toLowerCase()
    .replace(/(\w{4})/g, '$1 ')
    .trim()
    .split(' ')
    .join('')
    .toUpperCase();

  const query = `?secret=${secret}&issuer=${config.name}`;
  const encodedQuery = query.replace('?', '%3F').replace('&', '%26');
  const uri = `otpauth://totp/${config.name}${config.account}`;

  return {
    secret,
    uri: `${uri}${query}`,
    qr: `https://quickchart.io/chart?chs=166x166&chld=L|0&cht=qr&chl=${uri}${encodedQuery}`,
  };
}

/**
 * Generates a time based one time password (TOTP) using the provided secret.
 *
 * @param {string} secret The secret generated by {@link generateSecret}.
 * @returns {{ token: string } | null} The generated token or null if input is invalid.
 */
export function generateToken(secret: string) {
  if (!secret || !secret.length) return null;
  const unformatted = secret.replace(/\W+/g, '').toUpperCase();
  const bin = b32.decode(unformatted);

  return { token: notp.totp.gen(bin) };
}

/**
 * Verifies a TOTP token generated using the provided secret.
 *
 * @param {string} secret The secret used to generate the token.
 * @param {string} [token] The token to verify.
 * @param {number} [window=4] Allowed time window offset.
 * @returns {{ delta: number } | null} Verification result or null when token is missing.
 */
export function verifyToken(secret: string, token?: string, window = 4) {
  if (!token || !token.length) return null;

  const unformatted = secret.replace(/\W+/g, '').toUpperCase();
  const bin = b32.decode(unformatted);

  return notp.totp.verify(token.replace(/\W+/g, ''), bin, {
    window,
    time: 30,
  });
}
